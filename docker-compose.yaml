services:
  # IMDTravel Microservice
  imdtravel:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: imdtravel-service
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    volumes:
      - ./:/app
      - /app/node_modules
      - /app/apps/imdtravel/node_modules
      - /app/apps/imdtravel/prisma/generated
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - duck-network
    command: bash /app/scripts/init-imdtravel.sh

  # AirlinesHub Microservice
  airlineshub:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: airlineshub-service
    ports:
      - "3001:3001"
    env_file:
      - .env.docker
    volumes:
      - ./:/app
      - /app/node_modules
      - /app/apps/airlineshub/node_modules
      - /app/apps/airlineshub/prisma/generated
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - duck-network
    command: bash /app/scripts/init-airlineshub.sh

  # Exchange Microservice
  exchange:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: exchange-service
    ports:
      - "3002:3002"
    env_file:
      - .env.docker
    volumes:
      - ./:/app
      - /app/node_modules
      - /app/apps/exchange/node_modules
    networks:
      - duck-network
    command: bash /app/scripts/init-exchange.sh

  # Fidelity Microservice
  fidelity:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: fidelity-service
    ports:
      - "3003:3003"
    env_file:
      - .env.docker
    volumes:
      - ./:/app
      - /app/node_modules
      - /app/apps/fidelity/node_modules
    networks:
      - duck-network
    command: bash /app/scripts/init-fidelity.sh

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quack-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: quack
      POSTGRES_PASSWORD: quack
      POSTGRES_MULTIPLE_DATABASES: "imdtravel,airlineshub,fidelity"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-databases.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quack"]
      interval: 2s
      timeout: 1s
      retries: 20
    networks:
      - duck-network
    


  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: quack-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - duck-network

networks:
  duck-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:

